name: Main

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  release:
    types:
      - published

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Enable corepack
      run: corepack enable
    - uses: actions/setup-node@v4
      env:
        yarn: 4.5.1
      with:
        node-version: 22
        cache: 'yarn'
    - name: Install dependencies
      run: yarn install
    - name: Run lint
      run: yarn run lint
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint
    services:
      mariadb:
        image: mariadb:latest
        ports:
          - 3306
        env:
          MARIADB_USER: quotes
          MARIADB_PASSWORD: p4ssw0rd
          MARIADB_DATABASE: quotes
          MARIADB_ROOT_PASSWORD: p4ssw0rd
        options: --health-cmd="mariadb-admin ping" --health-interval=5s --health-timeout=2s --health-retries=3
    steps:
    - uses: actions/checkout@v4
    - name: Enable corepack
      run: corepack enable
    - uses: actions/setup-node@v4
      env:
        yarn: 4.5.1
      with:
        node-version: 22
        cache: 'yarn'
    - name: Install dependencies
      run: yarn install
    - name: Verify MariaDB connection
      env:
        PORT: ${{ job.services.mariadb.ports[3306] }}
      run: |
        while ! mysqladmin ping -h"127.0.0.1" -P"$PORT" --silent; do
          sleep 1
        done
    - name: Build projects, run migrations and seeds
      env:
        DATABASE_HOST: "127.0.0.1"
        DATABASE_NAME: quotes
        DATABASE_USER: quotes
        DATABASE_PASSWORD: p4ssw0rd
        DATABASE_PORT: ${{ job.services.mariadb.ports[3306] }}
      run: |
        yarn run build
        yarn run migrate
        yarn run seed
    - name: Run tests
      env:
        DATABASE_HOST: "127.0.0.1"
        DATABASE_NAME: quotes
        DATABASE_USER: quotes
        DATABASE_PASSWORD: p4ssw0rd
        DATABASE_PORT: ${{ job.services.mariadb.ports[3306] }}
        TOKEN: ${{ secrets.CODECOV_TOKEN }}
      run: |
        yarn test
        CODECOV_TOKEN="$TOKEN" bash <(curl -s https://codecov.io/bash)
  push_latest_dockerhub:
    name: Push image with latest tag to DockerHub
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [test]
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1
    - name: Login to DockerHub
      env:
        DOCKER_HUB_USER: ${{ secrets.DOCKER_HUB_USER }}
        DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      run: docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_ACCESS_TOKEN 
    - name: Build and tag Docker image
      env:
        USER: ${{ secrets.DOCKER_HUB_USER }}
        REPOSITORY: express-graphql-example
        TAG: latest
      run: docker build -t $USER/$REPOSITORY:$TAG .
    - name: Push Docker image
      env:
        USER: ${{ secrets.DOCKER_HUB_USER }}
        REPOSITORY: express-graphql-example
        TAG: latest
      run: docker push $USER/$REPOSITORY:$TAG
  push_release_dockerhub:
    name: Push image with release version tag to DockerHub
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1
    - name: Set tag variable
      id: version
      run: echo ::set-output name=tag::${GITHUB_REF#"refs/tags/"}
    - name: Login to DockerHub
      env:
        DOCKER_HUB_USER: ${{ secrets.DOCKER_HUB_USER }}
        DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      run: docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_ACCESS_TOKEN 
    - name: Build and tag Docker image
      env:
        USER: ${{ secrets.DOCKER_HUB_USER }}
        REPOSITORY: express-graphql-example
        TAG: ${{ steps.version.outputs.tag }}
      run: docker build -t $USER/$REPOSITORY:$TAG .
    - name: Push Docker image
      env:
        USER: ${{ secrets.DOCKER_HUB_USER }}
        REPOSITORY: express-graphql-example
        TAG: ${{ steps.version.outputs.tag }}
      run: docker push $USER/$REPOSITORY:$TAG
